module Lec3 where

-- can mark some arguments as irrelevant
-- irrelevant parameters can only appear in types (or as part of irrelevant arguments)

id : [x:Type] -> x -> x @ 1
id = \[x] y. (y : x)

t0 : Bool @ 1
t0 = id [Bool] True

t1 : Bool @ 1
t1 = id [Bool] (id [Bool] True)

id2 : [x:Type] -> (y : x) -> x @ 1
id2 = \[x] y. id [x] (y : x)

--  This shouldn't type check because y is relevant
--

{-
id' : [x:Type] -> [y:x] -> x
id' = \[x][y]. y
-}

{-
id2' : [x:Type] -> Type
id2' = \[x]. id [Type] x 
-}



-----------------------------------------------------
--  Irrelevant arguments are ignored during type equality

irrelevance : (p : [Bool] -> Bool) -> p [True] = p [False] @ 1
irrelevance = \p . Refl





-----------------------------------------------------
-- Propositional equality is relevant
-- Cannot ignore/erase proofs that are used for 'subst'. 
-- Need a termination analysis to do this.

proprel : [a : Type] -> (a = Bool) -> (x : a) -> Bool @ 1
proprel = \[a] pf x . 
  subst x by pf 

