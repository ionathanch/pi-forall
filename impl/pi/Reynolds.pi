{- Adapted from https://vilhelms.github.io/posts/why-must-inductive-types-be-strictly-positive/ -}

module Reynolds where
import Logic

Phi : Type -> Type
Phi = \S. (S -> Type) -> Type

-- Basic manipulations of equality

cong : [A : Type] -> [B : Type] -> [x : A] -> [y : A] -> [f : A -> B] -> x = y -> f x = f y
cong = \[A]. \[B]. \[x]. \[y]. \[f]. \h. subst Refl by h

transp : [A : Type] -> [B : A -> Type] -> [x : A] -> [y : A] -> x = y -> B x -> B y
transp = \[A]. \[B]. \[x]. \[y]. \h. \Bx. subst Bx by h

-- Our non-strictly positive datatype and some injectivity lemmas

data A0 : Type where
  MkA0 of (Phi A0)

f : (A0 -> Type) -> A0
f = \x. MkA0 (\z. z = x)

A0Inj : (x : Phi A0 @ 1) -> (y : Phi A0 @ 1) -> MkA0 x = MkA0 y -> x = y
A0Inj = \x. \y. \h.
  cong [A0] [Phi A0] [MkA0 x] [MkA0 y]
       [\a. case a of MkA0 z -> z] h

-- MkA0 (_= x) = MkA0 (_= y) ---[A0Inj]--> (_= x) = (_= y) ---[transp]--> (x = x) -> (x = y)
fInj : (x : A0 -> Type @ 1) -> (y : A0 -> Type @ 1) -> f x = f y -> x = y
fInj = \x. \y. \h.
  transp [Phi A0] [\f. f x] [\z. z = x] [\z. z = y]
         (A0Inj (\z. z = x) (\z. z = y) h) Refl

-- Russell's paradox

P0 : A0 -> Type
P0 = \x. {P : A0 -> Type | And (x = f P) (neg (P x)) }

a0 : A0
a0 = f P0

lem : neg (P0 a0)
lem = \p. let (P , hn) = p in
  case hn of
    Conj h n -> n (subst p by fInj P0 P h)
    -- h : f P0 = f P
    -- n : neg (P a0)
    -- fInj P0 P h : P0 = P

{-
false : Void
false = lem (P0 , Conj Refl lem)
-}