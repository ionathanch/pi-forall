module Hurkens where

P : Type -> Type
P = \S. S -> Type

U : Type
U = (x : Type) -> ((P (P x)) -> x) -> P (P x)

tau : (P (P U)) -> U
tau = \t. \x. \f. \p. t (\s. p (f (s x f)))

sigma : U -> P (P U)
sigma = \s. s U tau

Delta : Type -> P U
Delta = \b. \y. ((p : P U) -> sigma y p -> p (tau (sigma y))) -> b

Omega : U
Omega = tau (\p. (x : U) -> sigma x p -> p (\y. x y))

M : (x : U) -> sigma x (Delta Void) -> (Delta Void) x
M = \x. \two. \three. three (Delta Void) two (\p. three (\y. p (tau (sigma y))))

{-
R : (p : P U) -> ((x : U) -> sigma x p -> p x) -> p Omega
R = \zero. \one. one Omega (\x. one (tau (sigma x)))

L : neg ((p : P U) -> ((x : U) -> sigma x p -> p x) -> p Omega)
L = \zero. zero (Delta Void) M (\p. zero (\y. p (tau (sigma y))))

false : Void
false = L R
-}