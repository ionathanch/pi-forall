module Leibniz where

EqL : (X : Type) -> X -> X -> Type
EqL = \X x y. (P : X -> Type) -> P x -> P y

refl : (X : Type) -> (x : X) -> EqL X x x
refl = \X x P px. px

sym : (X : Type) -> (x : X) -> (y : X) -> EqL X x y -> EqL X y x
sym = \X x y eqxy P. eqxy (\z. P z -> P x) (\px. px)

trans : (X : Type) -> (x : X) -> (y : X) -> (z : X) -> EqL X x y -> EqL X y z -> EqL X x z
trans = \X x y z eqxy eqyz P px. (eqyz P (eqxy P px))
