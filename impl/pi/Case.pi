module Case where

data TT : Type @ 0 where
  tt @ 0

elimTT : [P : TT^0 -> Type] -> P tt^0 -> (t : TT^0) -> P t
elimTT = \[P] Ptt t. case t of
  tt -> Ptt

elimFunTT : [P : TT^0 -> Type] -> [A : Type] -> (f : A -> TT^0) -> (x : A) -> P tt^0 -> P (f x)
elimFunTT = \[P] [A] f x Ptt.
  let g = (\y q. case y of tt -> q
    : (y : TT^0) -> y = f x -> tt^0 = f x) in
  let h = (\[y] q py. subst py by q
    : [y : TT^0] -> y = f x -> P y -> P (f x)) in
  h [tt^0] (g (f x) Refl) Ptt

data Box : Type @ 1 where
  box of (TT^1) @ 1

-- This shouldn't fail, and should match on tt as a displaced constructor
h : (P : Box^0 -> Type) -> P (box^0 tt^1) -> (b : Box^0) -> P b
h = \P Pb b. case b of
  box t -> case t of
    tt -> Pb
