module Product where

import Equality

data Sigma (A : Type @ 0) (B : A -> Type) : Type @ 1 where
  Prod of (x : A @ 0) (B x)

proj1 : [A : Type] -> [B : A -> Type] -> Sigma A B -> A
proj1 = \[A] [B] x. case x of
  Prod x y -> x

proj2 : [A : Type] -> [B : A -> Type] -> (x : Sigma A B) -> B (proj1 [A] [B] x)
proj2 = \[A] [B] x. case x of
  Prod z y -> y

injectivity1 : [A : Type] -> [B : A -> Type] -> (x1 : A) -> (y1 : B x1) -> (x2 : A) -> (y2 : B x2) ->
				       ((Prod x1 y1 : Sigma A B) = Prod x2 y2) -> x1 = x2
injectivity1 = \[A] [B] x1 y1 x2 y2 eq.
	f_equal [Sigma A B] [A] [proj1 [A] [B]] [Prod x1 y1] [Prod x2 y2] eq

injectivity2 : [A : Type @ 0] -> [B : A -> Type @ 1] -> (x : A @ 0) -> (y1 : B x @ 1) -> (y2 : B x @ 1) ->
				       ((Prod^0 x y1 : Sigma^0 A B) = Prod^0 x y2) -> y1 = y2 @ 2
injectivity2 = \[A] [B] x y1 y2 eq. TRUSTME

curry : [A : Type] -> [B : A -> Type] -> [C : Sigma A B -> Type] ->
				((p : Sigma A B) -> C p) -> ((x: A)  -> (y : B x) -> C (Prod x y))
curry = \[A] [B] [C] f x y. f (Prod x y)

uncurry : [A : Type] -> [B : A -> Type] -> [C : Sigma A B -> Type] ->
					((x: A)  -> (y : B x) -> C (Prod x y)) -> ((p : Sigma A B) -> C p)
uncurry = \[A] [B] [C] f p. case p of Prod x y -> f x y

---------------------------------------------------
-- Weak dependent pairs

{-
We have a builtin dependent pair datatype defined as

	data _Sigma (A : Type @ 0) (B : (x : A @ 0) -> Type) : Type @ 1 where
	  _Prod of (x : A @ 0) (B x) @ 1

with syntactic sugar

	{x : A | B}            for    _Sigma A (\x. B : (x : A @ 0) -> Type)
	(a, b)                 for    _Prod a b
	let (x, y) = p in b    for    case p of _Prod x y -> b
-}

fst : [A : Type @ 0] -> [B : (_ : A @ 0) -> Type @ 1] -> {x : A | B x} -> A @ 2
fst = \[A] [B] p. let (x, y) = p in x

-- This won't type check because fst is too big, and raising B doesn't raise its domain level
-- snd : [A : Type @ 0] -> [B : (_ : A @ 0) -> Type @ 1] -> (p : {x : A | B x} @ 1) -> B (fst [A] [B] p) @ 2
