module Examples where

import Blowup
import Nat
import Logic
import BoolLib
import Product
import Or
import Case
import Fin
import Equal
import Equality
import Fix
import NatChurch
-- import Hurkens
-- import HurkensEx
import IsProp
import List
import Pi
-- import Lennart
import Vec
import Lambda
import Lambda0
import Lambda1
import Lambda2

data Vec (A : Type) (n : Nat) : Type where
   Nil of [n = 0]
   Cons of [m:Nat](A)(Vec A m)[n = Succ m]

v0 : Vec Bool 1
v0 = Cons [0] True Nil

loop : Nat
loop = loop

map : [A : Type] -> [B : Type] -> [n:Nat] -> (f : A -> B) -> Vec A n -> Vec B n
map = \[A][B][n] f vec .
          case vec of 
            Nil -> Nil
            Cons [m] x xs -> Cons [m] (f x) (map [A][B][m] f xs)